{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wosa Documentation Welcome to the official documentation page, on this website you can find useful guides and information related to the technical aspects of the framework. What's on your mind? Are you looking for how to install the framework? Oh, Maybe you are looking for how to use the UpdateFFX tool to update your server easier! Perhaps, Are looking for how to create your own resource with the framework & how to use the connector . Contribute This documentation site is maintained by the community as a whole to provide our customers with the best docs, contribute here .","title":"Home"},{"location":"#wosa-documentation","text":"Welcome to the official documentation page, on this website you can find useful guides and information related to the technical aspects of the framework.","title":"Wosa Documentation"},{"location":"#whats-on-your-mind","text":"Are you looking for how to install the framework? Oh, Maybe you are looking for how to use the UpdateFFX tool to update your server easier! Perhaps, Are looking for how to create your own resource with the framework & how to use the connector .","title":"What's on your mind?"},{"location":"#contribute","text":"This documentation site is maintained by the community as a whole to provide our customers with the best docs, contribute here .","title":"Contribute"},{"location":"faq/","text":"Frequently Asked Questions Frequently asked questions answered. Question: Is this framework based off vRP, ESX or any other framework? Answer: No this framework is completely standalone and scratch built. Question: What language is this framework made in? Answer: This framework is built in the scripting language Lua. Question: Is the source code of the framework obfuscated? Answer: No, All of our customers can edit the source code how they want and is not \"obfuscated\" in any way. Question: Can I use ESX scripts or vRP scripts with this framework? Answer: Not straight out of the box, It is possible however if you modify the script with the API Connector native set. Question: Can I create my own extensions? Answer: Yes you can! Use the API Connector native set to use/access wosa functions, Documented events are also available. Question: How do I keep my files updated without loosing all of my configs? Answer: Use our UpdateFFX program for that.","title":"F.A.Q"},{"location":"faq/#frequently-asked-questions","text":"Frequently asked questions answered. Question: Is this framework based off vRP, ESX or any other framework? Answer: No this framework is completely standalone and scratch built. Question: What language is this framework made in? Answer: This framework is built in the scripting language Lua. Question: Is the source code of the framework obfuscated? Answer: No, All of our customers can edit the source code how they want and is not \"obfuscated\" in any way. Question: Can I use ESX scripts or vRP scripts with this framework? Answer: Not straight out of the box, It is possible however if you modify the script with the API Connector native set. Question: Can I create my own extensions? Answer: Yes you can! Use the API Connector native set to use/access wosa functions, Documented events are also available. Question: How do I keep my files updated without loosing all of my configs? Answer: Use our UpdateFFX program for that.","title":"Frequently Asked Questions"},{"location":"updateffx/","text":"UpdateFFX Guide Lets learn how to use our UpdateFFX and what it is! What is \"UpdateFFX\"? UpdateFFX which stands for Update Framework FxServer is essentially a program which is used by server owners to update the framework when a new version is released on GitHub . The key difference with using our tool is that you will have all of your configuration files automatically saved so you dont have to save them manually before downloading a new update. The tool is only designed to be used on Windows and is only properly tested on Windows 10. How to download You will only have to download our setup.exe file and run that and your good to go! Updates of the program itself are handled automatically on the launch. Note that your computer might think that this is a virus or something bad even though it is not :( Preventing issues Do not have wosa resource scripts in the open resources/ folder, Instead isolate them into a catogory such as resources/[wosa]/ . Always make sure that your server is off before updating any wosa related resource as the program might not be able to handle files that are already in use by the server. Do never close the program while you are updating as that might screw up, delete or put your files into a unrecoverably state, Just wait it out.","title":"UpdateFFX"},{"location":"updateffx/#updateffx-guide","text":"Lets learn how to use our UpdateFFX and what it is!","title":"UpdateFFX Guide"},{"location":"updateffx/#what-is-updateffx","text":"UpdateFFX which stands for Update Framework FxServer is essentially a program which is used by server owners to update the framework when a new version is released on GitHub . The key difference with using our tool is that you will have all of your configuration files automatically saved so you dont have to save them manually before downloading a new update. The tool is only designed to be used on Windows and is only properly tested on Windows 10.","title":"What is \"UpdateFFX\"?"},{"location":"updateffx/#how-to-download","text":"You will only have to download our setup.exe file and run that and your good to go! Updates of the program itself are handled automatically on the launch. Note that your computer might think that this is a virus or something bad even though it is not :(","title":"How to download"},{"location":"updateffx/#preventing-issues","text":"Do not have wosa resource scripts in the open resources/ folder, Instead isolate them into a catogory such as resources/[wosa]/ . Always make sure that your server is off before updating any wosa related resource as the program might not be able to handle files that are already in use by the server. Do never close the program while you are updating as that might screw up, delete or put your files into a unrecoverably state, Just wait it out.","title":"Preventing issues"},{"location":"connector/natives_client/","text":"Client Natives Client classed Wosa natives to be used with the API connector. Scripting -- Desc: Returns the current usage in kb's as a number (memory) from the core. local kbs = Wosa.cMemUsage() -- Desc: Creates a thread, \"CreateThread\" basically. Wosa.Loop(RequireCharacterLoaded --[[ bool ]], function() end, WaitMs --[[ int ]]) Player -- Desc: Gets the players ped cached, A good memory saving practise. local ped = Wosa.Player.Ped() -- Desc: Gets the players coords cached, A good memory saving practise. local coords = Wosa.Player.Coords() User -- Desc: The current character table used, such as \"character_1\". local characterTable = Wosa.User.CharacterDB() -- Desc: The current inventory table used, such as \"inventory_1\". local characterTable = Wosa.User.InventoryDB() -- Desc: Can be used to manually overwrite the coord saver where you can save with the \"last position\". Example if you are in a interior you dont want anyone to be avaliable to spawn back in. Wosa.User.CoordsSaver(bool --[[ bool ]]) Character local firstname = Wosa.Character.Firstname() local middlename = Wosa.Character.Middlename() local lastname = Wosa.Character.Lastname() local day = Wosa.Character.Day() local month = Wosa.Character.Month() local year = Wosa.Character.Year() local gender = Wosa.Character.Gender() local drivers_license = Wosa.Character.Drivers() local truck_license = Wosa.Character.Truck() local air_license = Wosa.Character.Air() -- Desc: Not even used lol... *yet* local boat_license = Wosa.Character.Boat() local firearm_license = Wosa.Character.Firearm() local thirst = Wosa.Character.Thirst() local hunger = Wosa.Character.Hunger() Phone -- Desc: Checks if Mobile-Data in the phone in the menu is enabled. isMobileDataEnabled = Wosa.Character.Phone.MobileData() Appearance -- Desc: Load the appearance directly from the database and then set it to your character, stuff such as heritage, face stuff etc and clothes. Wosa.Character.Appearance.Load() -- Desc: Save what your currently wearing directly to the database. Wosa.Character.Appearance.Save() -- Save the client cached data to the database, Cache the appearance with \"Wosa.Character.Appearance.SaveToLocal()\". Wosa.Character.Appearance.SaveLocalToDB() -- Save your current appearance to the client cache, This does get \"cleared\" once you load something from database, save another time or leave the server. Wosa.Character.Appearance.SaveToLocal() -- Desc: Load from the local cache that you saved to by using the native \"Wosa.Character.Appearance.SaveToLocal()\". Wosa.Character.Appearance.LoadFromLocal() Alcohol -- Can't remember the proper amounts, but would guess its way under 1.0. Wosa.Character.Alcohol.Add(Amount --[[ float ]]) -- Get the current alcohol level in the blood, This can be a good way to see how much you should add to make it somewhat legit. local amount = Wosa.Character.Alcohol.Get() -- Set the alcohol level to a set point. Wosa.Character.Alcohol.Set(Amount --[[ float ]]) Job Wosa.Character.Job.Set(JobName --[[ string ]], Salary --[[ int ]], JobNameLabel --[[ string ]]) local job = Wosa.Character.Job.Get() -- Basically sets you back to \"Civilian\". Wosa.Character.Job.Clear() Faction -- Desc: Download your faction, needs to be downloaded so it can be cached local rank = Wosa.Character.Job.Faction.Download(JobName --[[ string ]]) -- Desc: Gets the rank, Use this after you have downloaded for the first time. local rank = Wosa.Character.Job.Faction.Rank(JobName --[[ string ]]) -- Desc: Gets the sub rank, like a callsign or similar, can be used for anything. local subRank = Wosa.Character.Job.Faction.SubRank(JobName --[[ string ]]) Inventory local inventory = Wosa.Character.Inventory.Get() local cash = Wosa.Character.Inventory.Cash() Players local player = Wosa.Game.ClosestPlayer() local players = Wosa.Game.Players() local playersInArea = Wosa.Game.PlayersArea() Vehicle local fuel = Wosa.Game.Vehicle.GetFuel(Vehicle --[[ int ]]) Wosa.Game.Vehicle.SetFuel(Vehicle --[[ int ]], Amount --[[ int ]]) local haveAnyExtras = Wosa.Game.Vehicle.HaveExtras(Vehicle --[[ int ]]) -- Desc: Convert the vehicle into a table, can be used to store the vehicle in the database etc. local data = Wosa.Game.Vehicle.ToData(Vehicle --[[ int ]]) local vehicle = Wosa.Game.Vehicle.CreateFromData(Data --[[ table ]], X --[[ int ]], Y --[[ int ]], Z --[[ int ]], H --[[ int ]], DontNetwork --[[ bool ]], SpecialData --[[ table ]]) local vehicle = Wosa.Game.Vehicle.Create(VehicleName --[[ string ]], Coords --[[ vector3/vector4/table ]], Data --[[ table ]], Network --[[ bool ]], Heading --[[ int ]]) local cruiseEnabled = Wosa.Game.Vehicle.isCruiseEnabled() Wosa.Game.Vehicle.Engine(Vehicle --[[ int ]]) Vehicle Flags --[[ ENUM TYPES (USE INT) 1 = DISABLE_GARAGE_STORAGE_FOR_VEHICLE 2 = DISABLE_LS_CUSTOMS_FOR_VEHICLE You can create own ones of course but these are the official. ]] Wosa.Game.Vehicle.Flag.Set(Vehicle --[[ int ]], Flag --[[ int ]]) Wosa.Game.Vehicle.Flag.Remove(Vehicle --[[ int ]], Flag --[[ int ]]) Wosa.Game.Vehicle.Flag.ClearAll(Vehicle --[[ int ]]) Wosa.Game.Vehicle.Flag.Get(Vehicle --[[ int ]], Flag --[[ int ]]) --[[ Example: Wosa.Game.Vehicle.Flag.Set(vehicle, 3) if Wosa.Game.Vehicle.Flag.Get(vehicle, 3) then print('Flag exists!') end ]] Request Wosa.Game.Request.Dict(Dict --[[ string ]]) Wosa.Game.Request.Walk(Dict --[[ string ]]) Wosa.Game.Request.Ped(PedModelName --[[ string ]]) -- Desc: This is hopefully gonna get removed soon so use \"Wosa.Game.Request.Model\" instead as that supports both hash and model name hehe now. Wosa.Game.Request.ModelHash(ModelHash --[[ string ]]) Wosa.Game.Request.Model(Model --[[ string ]]) Ped -- Desc: Revives your ped if your dead. Wosa.Game.Ped.Revive() -- Desc: Respawn your ped if your dead. Wosa.Game.Ped.Respawn() Wosa.Game.Ped.Create(PedName --[[ string ]], Coords --[[ vector3/vector4/table ]], Data --[[ table ]], Network --[[ bool ]], Heading --[[ int ]]) -- Desc: gotta have a EUP file loaded into your resource. Take a look at how the police job did it. Wosa.Game.Ped.LoadEUP(EUPOutfit --[[ string ]]) Wosa.Game.Ped.Clothing(Arms --[[ int ]], Arms_tex --[[ int ]], Undershirt --[[ int ]], Undershirt_tex --[[ int ]], Top --[[ int ]], Top_tex --[[ int ]], Pants --[[ int ]], Pants_tex --[[ int ]], Shoes --[[ int ]], Shoes_tex --[[ int ]], Neck --[[ int ]], Neck_tex --[[ int ]]) -- Desc: The \"OnlyIf\" bool can be used so only if \"OnlyIf\" is true will it get set etc, it is kinda logical once you play around with it. Wosa.Game.Ped.Cuff(Cuff --[[ bool ]], OnlyIf --[[ bool ]]) local isCuffed = Wosa.Game.Ped.isCuffed() -- Desc: The \"Source\" is the \"dragger\" so to say. Wosa.Game.Ped.Drag(Drag --[[ bool ]], Source --[[ int ]]) -- Desc: Seats your ped. Wosa.Game.Ped.Seat() Wosa.Game.Ped.UnSeat() -- Desc: Search a player, you will get up a little menu as well. Wosa.Game.Ped.Search(Player --[[ int ]]) -- Desc: If your ped is giving up by putting up the hands etc. local surrendering = Wosa.Game.Ped.GivenUp() Weapon -- Desc: Can get the weapon table by returning \"Wosa.Game.Ped.Weapon.Get()\". Wosa.Game.Ped.Weapon.Set(WeaponData --[[ table ]]) local weaponData = Wosa.Game.Ped.Weapon.Get() Camera -- Desc: \"Extra_data\" can be \"{new_fov = 50.0}\" etc and/or \"{fade = true}\". Wosa.Game.Camera.View(X --[[ int ]], Y --[[ int ]], Z --[[ int ]], RX --[[ int ]], RY --[[ int ]], RZ --[[ int ]], Extra_data --[[ table ]]) -- Desc: Animate a camera slide between two coords. Yes I know its retarded should be vec3 coords instead heh. \"Extra_data\" used the same as above, Only thing extra is that you can use \"{skip = true}\" to skip the \"wait until no camera is active thing\". Wosa.Game.Camera.Animated(X --[[ int ]], Y --[[ int ]], Z --[[ int ]], RX --[[ int ]], YX --[[ int ]], ZX --[[ int ]], X2 --[[ int ]], Y2 --[[ int ]], Z2 --[[ int ]], RX2 --[[ int ]], RY2 --[[ int ]], RZ2 --[[ int ]], Duration --[[ int ]], Extra_data --[[ table ]]) -- Desc: Stop all scripting cameras. Wosa.Game.Camera.StopAll() Screen -- Desc: You can leave \"ShowType\" nil or anything, but you can however *set* it if you choose, its for the native \"EndTextCommandBusyspinnerOn\". Wosa.Game.Screen.Wheel(ShowText --[[ string ]], ShowTime --[[ int ]], ShowType --[[ int ]]) Wosa.Game.Screen.HelpTextTimer(Text1 --[[ string ]], Text2 --[[ string ]], Text3 --[[ string ]], Duration --[[ int ]]) Wosa.Game.Screen.HelpText(Text --[[ string ]]) Wosa.Game.Screen.MissionText(Text --[[ string ]], Duration --[[ int ]]) Wosa.Game.Screen.Notification(Text --[[ string ]]) local input = Wosa.Game.Screen.Input(TextEntry --[[ string ]], ExampleText --[[ string ]], MaxStringLenght --[[ int ]]) Wosa.Game.Screen.Text(X --[[ float ]], Y --[[ float ]], Width --[[ float ]], Height --[[ float ]], Scale --[[ float ]], Text --[[ string ]], R --[[ int ]], G --[[ int ]], B --[[ int ]], A --[[ int ]], Font --[[ int ]], Centre --[[ bool ]]) Wosa.Game.Screen.Text3DTimer(X --[[ float ]], Y --[[ float ]], Z --[[ float ]], Text --[[ string ]], Ms --[[ int ]]) Wosa.Game.Screen.Text3D(X --[[ float ]], Y --[[ float ]], Z --[[ float ]], Text --[[ string ]]) Hud local isHudDisplayed = Wosa.Game.Screen.Hud.Active() -- Desc: Run this each tick to block the hud from wosa and other stuff such as map. Wosa.Game.Screen.Hud.Block() Wosa.Game.Screen.Hud.Configure(HideFuel --[[ bool ]], HideThirst --[[ bool ]], HideHunger --[[ bool ]]) Wosa.Game.Screen.Hud.NewTextBar(Title --[[ string ]], Text --[[ string ]], Pos --[[ int ]]) local hideFuel, hideThirst, hideHunger = Wosa.Game.Screen.Hud.GetSettings() -- Will only work for official wosa resources sadly unless you modify this native. local anyMenuOpened = Wosa.Game.Screen.Hud.AnyMenuOpened() World Instance local WorldID = Wosa.Game.World.Get() Wosa.Game.World.Set(WorldID --[[ id ]]) -- Desc: Sets back to the default world. Wosa.Game.World.Clear() Scaleform Wosa.Game.Scaleform.Announcement(Time --[[ int ]], Header --[[ string ]], Text --[[ string ]]) Atc Wosa.Game.Atc.SetFlightMode(Mode --[[ int? ]], Callsign --[[ string ]], Original_airport --[[ string ]], Atc_header --[[ string ]], Vehicle -- [[ int ]]) Wosa.Game.Atc.PreSetAtc(Freq --[[ float ]], Freqfake --[[ float ]], Stationary --[[ bool ]]) -- Desc: Disable the ATC window. Wosa.Game.Atc.DisableWindow(bool --[[ bool ]]) local vehicle = Wosa.Game.Atc.Aircraft() local isStationary = Wosa.Game.Atc.Stationary() local freq = Wosa.Game.Atc.Freq() local airport = Wosa.Game.Atc.Airport() local gate = Wosa.Game.Atc.Gate() local runway = Wosa.Game.Atc.GetTaxiToRunway() VehicleAI version-1.0 Eh, works fine for more basic stuff and for a few vehicles at the same time (1-3) but the upcoming 2.0 version will be better ;p Wosa.Game.Vehicle.AI.Attach(entity --[[ int ]], function(vehicle --[[ int ]], data --[[ table ]]) end) Wosa.Game.Vehicle.AI.Avoidance(data --[[ table ]], vehicle --[[ int ]], speed --[[ float ]], function(vehicle --[[ int ]], data --[[ table ]], speed --[[ float ]]) end) Wosa.Game.Vehicle.AI.Task(data --[[ table ]], vehicle --[[ int ]], task --[[ string ]], speed --[[ float ]], function(data --[[ table ]], vehicle --[[ int ]], task --[[ string ]]) end) Other -- Disable/Enable the homescreen button in the character menu. Wosa.Misc.Homescreen(CanUse --[[ bool ]]) -- Return the keybind config from wosa_core (https://github.com/WosaFramework/Framework/blob/master/wosa_core/scripting/scripting_configs/Keybinds_config.lua). local keybinds = Wosa.Misc.Keybinds() local languages = Wosa.Translate.Get() local current_language = Wosa.Translate.Language()","title":"Client Natives"},{"location":"connector/natives_client/#client-natives","text":"Client classed Wosa natives to be used with the API connector.","title":"Client Natives"},{"location":"connector/natives_client/#scripting","text":"-- Desc: Returns the current usage in kb's as a number (memory) from the core. local kbs = Wosa.cMemUsage() -- Desc: Creates a thread, \"CreateThread\" basically. Wosa.Loop(RequireCharacterLoaded --[[ bool ]], function() end, WaitMs --[[ int ]])","title":"Scripting"},{"location":"connector/natives_client/#player","text":"-- Desc: Gets the players ped cached, A good memory saving practise. local ped = Wosa.Player.Ped() -- Desc: Gets the players coords cached, A good memory saving practise. local coords = Wosa.Player.Coords()","title":"Player"},{"location":"connector/natives_client/#user","text":"-- Desc: The current character table used, such as \"character_1\". local characterTable = Wosa.User.CharacterDB() -- Desc: The current inventory table used, such as \"inventory_1\". local characterTable = Wosa.User.InventoryDB() -- Desc: Can be used to manually overwrite the coord saver where you can save with the \"last position\". Example if you are in a interior you dont want anyone to be avaliable to spawn back in. Wosa.User.CoordsSaver(bool --[[ bool ]])","title":"User"},{"location":"connector/natives_client/#character","text":"local firstname = Wosa.Character.Firstname() local middlename = Wosa.Character.Middlename() local lastname = Wosa.Character.Lastname() local day = Wosa.Character.Day() local month = Wosa.Character.Month() local year = Wosa.Character.Year() local gender = Wosa.Character.Gender() local drivers_license = Wosa.Character.Drivers() local truck_license = Wosa.Character.Truck() local air_license = Wosa.Character.Air() -- Desc: Not even used lol... *yet* local boat_license = Wosa.Character.Boat() local firearm_license = Wosa.Character.Firearm() local thirst = Wosa.Character.Thirst() local hunger = Wosa.Character.Hunger()","title":"Character"},{"location":"connector/natives_client/#phone","text":"-- Desc: Checks if Mobile-Data in the phone in the menu is enabled. isMobileDataEnabled = Wosa.Character.Phone.MobileData()","title":"Phone"},{"location":"connector/natives_client/#appearance","text":"-- Desc: Load the appearance directly from the database and then set it to your character, stuff such as heritage, face stuff etc and clothes. Wosa.Character.Appearance.Load() -- Desc: Save what your currently wearing directly to the database. Wosa.Character.Appearance.Save() -- Save the client cached data to the database, Cache the appearance with \"Wosa.Character.Appearance.SaveToLocal()\". Wosa.Character.Appearance.SaveLocalToDB() -- Save your current appearance to the client cache, This does get \"cleared\" once you load something from database, save another time or leave the server. Wosa.Character.Appearance.SaveToLocal() -- Desc: Load from the local cache that you saved to by using the native \"Wosa.Character.Appearance.SaveToLocal()\". Wosa.Character.Appearance.LoadFromLocal()","title":"Appearance"},{"location":"connector/natives_client/#alcohol","text":"-- Can't remember the proper amounts, but would guess its way under 1.0. Wosa.Character.Alcohol.Add(Amount --[[ float ]]) -- Get the current alcohol level in the blood, This can be a good way to see how much you should add to make it somewhat legit. local amount = Wosa.Character.Alcohol.Get() -- Set the alcohol level to a set point. Wosa.Character.Alcohol.Set(Amount --[[ float ]])","title":"Alcohol"},{"location":"connector/natives_client/#job","text":"Wosa.Character.Job.Set(JobName --[[ string ]], Salary --[[ int ]], JobNameLabel --[[ string ]]) local job = Wosa.Character.Job.Get() -- Basically sets you back to \"Civilian\". Wosa.Character.Job.Clear()","title":"Job"},{"location":"connector/natives_client/#faction","text":"-- Desc: Download your faction, needs to be downloaded so it can be cached local rank = Wosa.Character.Job.Faction.Download(JobName --[[ string ]]) -- Desc: Gets the rank, Use this after you have downloaded for the first time. local rank = Wosa.Character.Job.Faction.Rank(JobName --[[ string ]]) -- Desc: Gets the sub rank, like a callsign or similar, can be used for anything. local subRank = Wosa.Character.Job.Faction.SubRank(JobName --[[ string ]])","title":"Faction"},{"location":"connector/natives_client/#inventory","text":"local inventory = Wosa.Character.Inventory.Get() local cash = Wosa.Character.Inventory.Cash()","title":"Inventory"},{"location":"connector/natives_client/#players","text":"local player = Wosa.Game.ClosestPlayer() local players = Wosa.Game.Players() local playersInArea = Wosa.Game.PlayersArea()","title":"Players"},{"location":"connector/natives_client/#vehicle","text":"local fuel = Wosa.Game.Vehicle.GetFuel(Vehicle --[[ int ]]) Wosa.Game.Vehicle.SetFuel(Vehicle --[[ int ]], Amount --[[ int ]]) local haveAnyExtras = Wosa.Game.Vehicle.HaveExtras(Vehicle --[[ int ]]) -- Desc: Convert the vehicle into a table, can be used to store the vehicle in the database etc. local data = Wosa.Game.Vehicle.ToData(Vehicle --[[ int ]]) local vehicle = Wosa.Game.Vehicle.CreateFromData(Data --[[ table ]], X --[[ int ]], Y --[[ int ]], Z --[[ int ]], H --[[ int ]], DontNetwork --[[ bool ]], SpecialData --[[ table ]]) local vehicle = Wosa.Game.Vehicle.Create(VehicleName --[[ string ]], Coords --[[ vector3/vector4/table ]], Data --[[ table ]], Network --[[ bool ]], Heading --[[ int ]]) local cruiseEnabled = Wosa.Game.Vehicle.isCruiseEnabled() Wosa.Game.Vehicle.Engine(Vehicle --[[ int ]])","title":"Vehicle"},{"location":"connector/natives_client/#vehicle-flags","text":"--[[ ENUM TYPES (USE INT) 1 = DISABLE_GARAGE_STORAGE_FOR_VEHICLE 2 = DISABLE_LS_CUSTOMS_FOR_VEHICLE You can create own ones of course but these are the official. ]] Wosa.Game.Vehicle.Flag.Set(Vehicle --[[ int ]], Flag --[[ int ]]) Wosa.Game.Vehicle.Flag.Remove(Vehicle --[[ int ]], Flag --[[ int ]]) Wosa.Game.Vehicle.Flag.ClearAll(Vehicle --[[ int ]]) Wosa.Game.Vehicle.Flag.Get(Vehicle --[[ int ]], Flag --[[ int ]]) --[[ Example: Wosa.Game.Vehicle.Flag.Set(vehicle, 3) if Wosa.Game.Vehicle.Flag.Get(vehicle, 3) then print('Flag exists!') end ]]","title":"Vehicle Flags"},{"location":"connector/natives_client/#request","text":"Wosa.Game.Request.Dict(Dict --[[ string ]]) Wosa.Game.Request.Walk(Dict --[[ string ]]) Wosa.Game.Request.Ped(PedModelName --[[ string ]]) -- Desc: This is hopefully gonna get removed soon so use \"Wosa.Game.Request.Model\" instead as that supports both hash and model name hehe now. Wosa.Game.Request.ModelHash(ModelHash --[[ string ]]) Wosa.Game.Request.Model(Model --[[ string ]])","title":"Request"},{"location":"connector/natives_client/#ped","text":"-- Desc: Revives your ped if your dead. Wosa.Game.Ped.Revive() -- Desc: Respawn your ped if your dead. Wosa.Game.Ped.Respawn() Wosa.Game.Ped.Create(PedName --[[ string ]], Coords --[[ vector3/vector4/table ]], Data --[[ table ]], Network --[[ bool ]], Heading --[[ int ]]) -- Desc: gotta have a EUP file loaded into your resource. Take a look at how the police job did it. Wosa.Game.Ped.LoadEUP(EUPOutfit --[[ string ]]) Wosa.Game.Ped.Clothing(Arms --[[ int ]], Arms_tex --[[ int ]], Undershirt --[[ int ]], Undershirt_tex --[[ int ]], Top --[[ int ]], Top_tex --[[ int ]], Pants --[[ int ]], Pants_tex --[[ int ]], Shoes --[[ int ]], Shoes_tex --[[ int ]], Neck --[[ int ]], Neck_tex --[[ int ]]) -- Desc: The \"OnlyIf\" bool can be used so only if \"OnlyIf\" is true will it get set etc, it is kinda logical once you play around with it. Wosa.Game.Ped.Cuff(Cuff --[[ bool ]], OnlyIf --[[ bool ]]) local isCuffed = Wosa.Game.Ped.isCuffed() -- Desc: The \"Source\" is the \"dragger\" so to say. Wosa.Game.Ped.Drag(Drag --[[ bool ]], Source --[[ int ]]) -- Desc: Seats your ped. Wosa.Game.Ped.Seat() Wosa.Game.Ped.UnSeat() -- Desc: Search a player, you will get up a little menu as well. Wosa.Game.Ped.Search(Player --[[ int ]]) -- Desc: If your ped is giving up by putting up the hands etc. local surrendering = Wosa.Game.Ped.GivenUp()","title":"Ped"},{"location":"connector/natives_client/#weapon","text":"-- Desc: Can get the weapon table by returning \"Wosa.Game.Ped.Weapon.Get()\". Wosa.Game.Ped.Weapon.Set(WeaponData --[[ table ]]) local weaponData = Wosa.Game.Ped.Weapon.Get()","title":"Weapon"},{"location":"connector/natives_client/#camera","text":"-- Desc: \"Extra_data\" can be \"{new_fov = 50.0}\" etc and/or \"{fade = true}\". Wosa.Game.Camera.View(X --[[ int ]], Y --[[ int ]], Z --[[ int ]], RX --[[ int ]], RY --[[ int ]], RZ --[[ int ]], Extra_data --[[ table ]]) -- Desc: Animate a camera slide between two coords. Yes I know its retarded should be vec3 coords instead heh. \"Extra_data\" used the same as above, Only thing extra is that you can use \"{skip = true}\" to skip the \"wait until no camera is active thing\". Wosa.Game.Camera.Animated(X --[[ int ]], Y --[[ int ]], Z --[[ int ]], RX --[[ int ]], YX --[[ int ]], ZX --[[ int ]], X2 --[[ int ]], Y2 --[[ int ]], Z2 --[[ int ]], RX2 --[[ int ]], RY2 --[[ int ]], RZ2 --[[ int ]], Duration --[[ int ]], Extra_data --[[ table ]]) -- Desc: Stop all scripting cameras. Wosa.Game.Camera.StopAll()","title":"Camera"},{"location":"connector/natives_client/#screen","text":"-- Desc: You can leave \"ShowType\" nil or anything, but you can however *set* it if you choose, its for the native \"EndTextCommandBusyspinnerOn\". Wosa.Game.Screen.Wheel(ShowText --[[ string ]], ShowTime --[[ int ]], ShowType --[[ int ]]) Wosa.Game.Screen.HelpTextTimer(Text1 --[[ string ]], Text2 --[[ string ]], Text3 --[[ string ]], Duration --[[ int ]]) Wosa.Game.Screen.HelpText(Text --[[ string ]]) Wosa.Game.Screen.MissionText(Text --[[ string ]], Duration --[[ int ]]) Wosa.Game.Screen.Notification(Text --[[ string ]]) local input = Wosa.Game.Screen.Input(TextEntry --[[ string ]], ExampleText --[[ string ]], MaxStringLenght --[[ int ]]) Wosa.Game.Screen.Text(X --[[ float ]], Y --[[ float ]], Width --[[ float ]], Height --[[ float ]], Scale --[[ float ]], Text --[[ string ]], R --[[ int ]], G --[[ int ]], B --[[ int ]], A --[[ int ]], Font --[[ int ]], Centre --[[ bool ]]) Wosa.Game.Screen.Text3DTimer(X --[[ float ]], Y --[[ float ]], Z --[[ float ]], Text --[[ string ]], Ms --[[ int ]]) Wosa.Game.Screen.Text3D(X --[[ float ]], Y --[[ float ]], Z --[[ float ]], Text --[[ string ]])","title":"Screen"},{"location":"connector/natives_client/#hud","text":"local isHudDisplayed = Wosa.Game.Screen.Hud.Active() -- Desc: Run this each tick to block the hud from wosa and other stuff such as map. Wosa.Game.Screen.Hud.Block() Wosa.Game.Screen.Hud.Configure(HideFuel --[[ bool ]], HideThirst --[[ bool ]], HideHunger --[[ bool ]]) Wosa.Game.Screen.Hud.NewTextBar(Title --[[ string ]], Text --[[ string ]], Pos --[[ int ]]) local hideFuel, hideThirst, hideHunger = Wosa.Game.Screen.Hud.GetSettings() -- Will only work for official wosa resources sadly unless you modify this native. local anyMenuOpened = Wosa.Game.Screen.Hud.AnyMenuOpened()","title":"Hud"},{"location":"connector/natives_client/#world-instance","text":"local WorldID = Wosa.Game.World.Get() Wosa.Game.World.Set(WorldID --[[ id ]]) -- Desc: Sets back to the default world. Wosa.Game.World.Clear()","title":"World Instance"},{"location":"connector/natives_client/#scaleform","text":"Wosa.Game.Scaleform.Announcement(Time --[[ int ]], Header --[[ string ]], Text --[[ string ]])","title":"Scaleform"},{"location":"connector/natives_client/#atc","text":"Wosa.Game.Atc.SetFlightMode(Mode --[[ int? ]], Callsign --[[ string ]], Original_airport --[[ string ]], Atc_header --[[ string ]], Vehicle -- [[ int ]]) Wosa.Game.Atc.PreSetAtc(Freq --[[ float ]], Freqfake --[[ float ]], Stationary --[[ bool ]]) -- Desc: Disable the ATC window. Wosa.Game.Atc.DisableWindow(bool --[[ bool ]]) local vehicle = Wosa.Game.Atc.Aircraft() local isStationary = Wosa.Game.Atc.Stationary() local freq = Wosa.Game.Atc.Freq() local airport = Wosa.Game.Atc.Airport() local gate = Wosa.Game.Atc.Gate() local runway = Wosa.Game.Atc.GetTaxiToRunway()","title":"Atc"},{"location":"connector/natives_client/#vehicleai-version-10","text":"Eh, works fine for more basic stuff and for a few vehicles at the same time (1-3) but the upcoming 2.0 version will be better ;p Wosa.Game.Vehicle.AI.Attach(entity --[[ int ]], function(vehicle --[[ int ]], data --[[ table ]]) end) Wosa.Game.Vehicle.AI.Avoidance(data --[[ table ]], vehicle --[[ int ]], speed --[[ float ]], function(vehicle --[[ int ]], data --[[ table ]], speed --[[ float ]]) end) Wosa.Game.Vehicle.AI.Task(data --[[ table ]], vehicle --[[ int ]], task --[[ string ]], speed --[[ float ]], function(data --[[ table ]], vehicle --[[ int ]], task --[[ string ]]) end)","title":"VehicleAI version-1.0"},{"location":"connector/natives_client/#other","text":"-- Disable/Enable the homescreen button in the character menu. Wosa.Misc.Homescreen(CanUse --[[ bool ]]) -- Return the keybind config from wosa_core (https://github.com/WosaFramework/Framework/blob/master/wosa_core/scripting/scripting_configs/Keybinds_config.lua). local keybinds = Wosa.Misc.Keybinds() local languages = Wosa.Translate.Get() local current_language = Wosa.Translate.Language()","title":"Other"},{"location":"connector/natives_server/","text":"Server Natives Server classed Wosa natives to be used with the API connector. User -- Desc: Used to get the r* license, Main used identifier in Wosa. local license = Wosa.User.License(ID --[[ int ]]) -- Desc: Used to get the currently active character table or user table. The \"Type\" can either be \"i\" for inventory or \"c\" for character. local Wosa.User.CurrentDB(ID --[[ int ]], Type --[[ string ]]) -- Desc: If you are looking to return a player id from a license you can use this function, This will return nil if the player is not active on the server. local ID = P_API.User.UserFromLicense(License --[[ string ]]) -- Desc: Will kick a user by the \"SYSTEM\". Wosa.User.Kick(ID --[[ int ]], Reason --[[ string ]]) -- Desc: Will permanent ban the user by the \"SYSTEM\". Wosa.User.Ban(ID --[[ int ]], Reason --[[ string ]]) AntiCheat -- Desc: This native can be used to ban people from \"event\" abusing currently. Do not use this native for regular banning as this system will and might work differently. Wosa.Character.AntiCheat.Ban(ID --[[ int ]], Type --[[ string ]], Custom --[[ string ]]) -- Example: Wosa.Character.AntiCheat.Ban(1, \"event\", \"MY_EVENT_HEHE\") Permission -- Desc: Will return the users rank in the server. local rank = Wosa.User.Permission.Get(ID --[[ int ]]) -- Desc: Will set the users rank. Needs to be a valid rank, If non valid they will not be available to join. local rank = Wosa.User.Permission.Set(ID --[[ int ]], Rank --[[ string ]]) Money -- Desc: Used to remove money from any available payment method. Wosa.Character.Money.RemoveFromAny(ID --[[ int ]], Amount --[[ int ]]) -- Desc: Used to add money to any available payment method. Wosa.Character.Money.AddToAny(ID --[[ int ]], Amount --[[ int ]]) -- Desc: Via this function you can get a players avaliable \"payment methods\". local methods = Wosa.Character.Money.Methods(ID --[[ int ]]) -- Example: print('Vanilla Card: '..tostring(methods[1])) print('Business Card: '..tostring(methods[2])) print('Cash: '..tostring(methods[3])) -- Desc: Check the money balance for a specific payment method. local balance = Wosa.Character.Money.Balance(ID --[[ int ]], Method --[[ string ]]) -- Example: local balance = Wosa.Character.Money.Balance(ID, 'RE_Cash') print('The player has '..balance..' as balance as hand cash.') -- Desc: Removes money from a specific payment method. Wosa.Character.Money.Remove(ID --[[ int ]], Method --[[ string ]], Amount --[[ int ]]) -- Desc: Add money to a specific payment method. Wosa.Character.Money.Add(ID --[[ int ]], Method --[[ string ]], Amount --[[ int ]]) -- Desc: Set the money for a specific payment method. Wosa.Character.Money.Set(ID --[[ int ]], Method --[[ string ]], Amount --[[ int ]]) Character -- Desc: Add driver license points to a players current character. Wosa.Character.AddLicensePoints(ID --[[ int ]], Points --[[ int ]]) -- Desc: Return character data for a users current selected character. Table possible indexes: -- firstname : string -- middlename = : string -- lastname = : string -- day = : string -- month = : string -- year = : int -- gender = : string -- phone_number : string -- driver_license : bool -- truck_license : bool -- air_license : bool -- boat_license : bool -- firearm_license : string -- job : string local data = Wosa.Character.Data(ID --[[ int ]]) -- Desc: Return characters data from first and lastname (from the database), will return the same table roughly as above ^^. local data = Wosa.Character.DataFromName(Firstname --[[ string ]], Lastname --[[ string ]]) -- Desc: Returns all characters from the database. local data = Wosa.Character.All() Faction Server faction natives does not take immediate effect on the user, The user is required to relogg in order to notice the changes. -- Desc: Add a player to a faction manually. This just straight accesses the database and uses a \"insert\" method to add it manually to the database. Wosa.Character.Faction.Add(ID --[[ int ]], Job --[[ string ]], Rank --[[ string ]], SubRank --[[ string ]]) -- Desc: This function can be used to remove a player from a faction, As this function utilizes license + character table means that you can remove players from a faction when they are offline as well. Wosa.Character.Faction.Remove(License --[[ string ]], CharacterTable --[[ string ]], Job --[[ string ]]) -- Desc: Used if you want to update a specific row in the database for a faction, You can update users rows when they are offline as well. Wosa.Character.Faction.Update(License --[[ string ]], CharacterTable --[[ string ]], Job --[[ string ]], newRank -- [[ string ]], newSubRank -- [[ string ]]) Inventory -- Desc: Returns all items in a table, loop or index the table to get values. Gets the inventory table for a specific user on the server. Table possible indexes: -- logged_name : string -- license_id : string -- item_name : string -- display_name : string -- item_string1 : string -- item_string2 : string -- item_string3 : string -- item_float1 : float -- item_float2 : float -- item_float3 : float -- item_bool1 : bool -- item_bool2 : bool -- item_bool3 : bool -- item_int1 : int -- item_int2 : int -- item_int3 : int local items = Wosa.Character.Inventory.Get(ID --[[ int ]]) -- Example: for i, item in ipairs(items) do print('this user has a '..item.display_name..'.') end -- Desc: Remove all \"removable\" items from the players inventory, That said all \"custom\" items but not items such as ID card, cash item, drivers license etc. Wosa.Character.Inventory.Item.RemoveAllCustom(ID --[[ int ]]) -- Desc: Add a item to a users character. -- // Core Dev Notice: Should prolly remove \"InventoryTable\" and auto set it for less confusion. Wosa.Character.Inventory.Item.Add(ID --[[ int ]], InventoryTable --[[ string ]], Data = --[[ table ]]) -- Example: local Data = {itemName = 'RI_EXAMPLE_ITEM', displayName = 'Example Item', Usable = true, Givable = true, Dropable = true, String1 = '', String2 = '', String3 = '', Bool1 = false, Bool2 = false, Bool3 = false, Int1 = 0, Int2 = 0, Int3 = 0, Float1 = 0.0, Float2 = 0.0, Float3 = 0.0 } Wosa.Character.Inventory.Item.Add(1, 'inventory_1', Data) -- Desc: So, This can be used in a few ways. If you leave \"ItemID\" nil then you will remove all items named the \"itemName\" in the inventory. If you want to remove a specific item input the \"ItemID\". Wosa.Character.Inventory.Item.Remove(ID --[[ int ]], ItemName --[[ string ]], ItemID --[[ int ]]) -- Desc: Check if a person has a item, will return true if the person has more then 1 of the item. local Exist = Wosa.Character.Inventory.Item.Exist(ID --[[ int ]], ItemName --[[ string ]]) Other -- Desc: Converts a SqlData to a readable Lua visible date, useful for transforming a timestamp to a \"readable\" format. Wosa.Tools.ConvertSQLDateToLuaFormat(SqlDate -- [[ int? ]]) -- Desc: Returns the full data set for all languages from \"wosa_core\". local Languages = Wosa.Translate.Get() -- Desc: Return the current used language. local Language = Wosa.Translate.Language()","title":"Server Natives"},{"location":"connector/natives_server/#server-natives","text":"Server classed Wosa natives to be used with the API connector.","title":"Server Natives"},{"location":"connector/natives_server/#user","text":"-- Desc: Used to get the r* license, Main used identifier in Wosa. local license = Wosa.User.License(ID --[[ int ]]) -- Desc: Used to get the currently active character table or user table. The \"Type\" can either be \"i\" for inventory or \"c\" for character. local Wosa.User.CurrentDB(ID --[[ int ]], Type --[[ string ]]) -- Desc: If you are looking to return a player id from a license you can use this function, This will return nil if the player is not active on the server. local ID = P_API.User.UserFromLicense(License --[[ string ]]) -- Desc: Will kick a user by the \"SYSTEM\". Wosa.User.Kick(ID --[[ int ]], Reason --[[ string ]]) -- Desc: Will permanent ban the user by the \"SYSTEM\". Wosa.User.Ban(ID --[[ int ]], Reason --[[ string ]])","title":"User"},{"location":"connector/natives_server/#anticheat","text":"-- Desc: This native can be used to ban people from \"event\" abusing currently. Do not use this native for regular banning as this system will and might work differently. Wosa.Character.AntiCheat.Ban(ID --[[ int ]], Type --[[ string ]], Custom --[[ string ]]) -- Example: Wosa.Character.AntiCheat.Ban(1, \"event\", \"MY_EVENT_HEHE\")","title":"AntiCheat"},{"location":"connector/natives_server/#permission","text":"-- Desc: Will return the users rank in the server. local rank = Wosa.User.Permission.Get(ID --[[ int ]]) -- Desc: Will set the users rank. Needs to be a valid rank, If non valid they will not be available to join. local rank = Wosa.User.Permission.Set(ID --[[ int ]], Rank --[[ string ]])","title":"Permission"},{"location":"connector/natives_server/#money","text":"-- Desc: Used to remove money from any available payment method. Wosa.Character.Money.RemoveFromAny(ID --[[ int ]], Amount --[[ int ]]) -- Desc: Used to add money to any available payment method. Wosa.Character.Money.AddToAny(ID --[[ int ]], Amount --[[ int ]]) -- Desc: Via this function you can get a players avaliable \"payment methods\". local methods = Wosa.Character.Money.Methods(ID --[[ int ]]) -- Example: print('Vanilla Card: '..tostring(methods[1])) print('Business Card: '..tostring(methods[2])) print('Cash: '..tostring(methods[3])) -- Desc: Check the money balance for a specific payment method. local balance = Wosa.Character.Money.Balance(ID --[[ int ]], Method --[[ string ]]) -- Example: local balance = Wosa.Character.Money.Balance(ID, 'RE_Cash') print('The player has '..balance..' as balance as hand cash.') -- Desc: Removes money from a specific payment method. Wosa.Character.Money.Remove(ID --[[ int ]], Method --[[ string ]], Amount --[[ int ]]) -- Desc: Add money to a specific payment method. Wosa.Character.Money.Add(ID --[[ int ]], Method --[[ string ]], Amount --[[ int ]]) -- Desc: Set the money for a specific payment method. Wosa.Character.Money.Set(ID --[[ int ]], Method --[[ string ]], Amount --[[ int ]])","title":"Money"},{"location":"connector/natives_server/#character","text":"-- Desc: Add driver license points to a players current character. Wosa.Character.AddLicensePoints(ID --[[ int ]], Points --[[ int ]]) -- Desc: Return character data for a users current selected character. Table possible indexes: -- firstname : string -- middlename = : string -- lastname = : string -- day = : string -- month = : string -- year = : int -- gender = : string -- phone_number : string -- driver_license : bool -- truck_license : bool -- air_license : bool -- boat_license : bool -- firearm_license : string -- job : string local data = Wosa.Character.Data(ID --[[ int ]]) -- Desc: Return characters data from first and lastname (from the database), will return the same table roughly as above ^^. local data = Wosa.Character.DataFromName(Firstname --[[ string ]], Lastname --[[ string ]]) -- Desc: Returns all characters from the database. local data = Wosa.Character.All()","title":"Character"},{"location":"connector/natives_server/#faction","text":"Server faction natives does not take immediate effect on the user, The user is required to relogg in order to notice the changes. -- Desc: Add a player to a faction manually. This just straight accesses the database and uses a \"insert\" method to add it manually to the database. Wosa.Character.Faction.Add(ID --[[ int ]], Job --[[ string ]], Rank --[[ string ]], SubRank --[[ string ]]) -- Desc: This function can be used to remove a player from a faction, As this function utilizes license + character table means that you can remove players from a faction when they are offline as well. Wosa.Character.Faction.Remove(License --[[ string ]], CharacterTable --[[ string ]], Job --[[ string ]]) -- Desc: Used if you want to update a specific row in the database for a faction, You can update users rows when they are offline as well. Wosa.Character.Faction.Update(License --[[ string ]], CharacterTable --[[ string ]], Job --[[ string ]], newRank -- [[ string ]], newSubRank -- [[ string ]])","title":"Faction"},{"location":"connector/natives_server/#inventory","text":"-- Desc: Returns all items in a table, loop or index the table to get values. Gets the inventory table for a specific user on the server. Table possible indexes: -- logged_name : string -- license_id : string -- item_name : string -- display_name : string -- item_string1 : string -- item_string2 : string -- item_string3 : string -- item_float1 : float -- item_float2 : float -- item_float3 : float -- item_bool1 : bool -- item_bool2 : bool -- item_bool3 : bool -- item_int1 : int -- item_int2 : int -- item_int3 : int local items = Wosa.Character.Inventory.Get(ID --[[ int ]]) -- Example: for i, item in ipairs(items) do print('this user has a '..item.display_name..'.') end -- Desc: Remove all \"removable\" items from the players inventory, That said all \"custom\" items but not items such as ID card, cash item, drivers license etc. Wosa.Character.Inventory.Item.RemoveAllCustom(ID --[[ int ]]) -- Desc: Add a item to a users character. -- // Core Dev Notice: Should prolly remove \"InventoryTable\" and auto set it for less confusion. Wosa.Character.Inventory.Item.Add(ID --[[ int ]], InventoryTable --[[ string ]], Data = --[[ table ]]) -- Example: local Data = {itemName = 'RI_EXAMPLE_ITEM', displayName = 'Example Item', Usable = true, Givable = true, Dropable = true, String1 = '', String2 = '', String3 = '', Bool1 = false, Bool2 = false, Bool3 = false, Int1 = 0, Int2 = 0, Int3 = 0, Float1 = 0.0, Float2 = 0.0, Float3 = 0.0 } Wosa.Character.Inventory.Item.Add(1, 'inventory_1', Data) -- Desc: So, This can be used in a few ways. If you leave \"ItemID\" nil then you will remove all items named the \"itemName\" in the inventory. If you want to remove a specific item input the \"ItemID\". Wosa.Character.Inventory.Item.Remove(ID --[[ int ]], ItemName --[[ string ]], ItemID --[[ int ]]) -- Desc: Check if a person has a item, will return true if the person has more then 1 of the item. local Exist = Wosa.Character.Inventory.Item.Exist(ID --[[ int ]], ItemName --[[ string ]])","title":"Inventory"},{"location":"connector/natives_server/#other","text":"-- Desc: Converts a SqlData to a readable Lua visible date, useful for transforming a timestamp to a \"readable\" format. Wosa.Tools.ConvertSQLDateToLuaFormat(SqlDate -- [[ int? ]]) -- Desc: Returns the full data set for all languages from \"wosa_core\". local Languages = Wosa.Translate.Get() -- Desc: Return the current used language. local Language = Wosa.Translate.Language()","title":"Other"},{"location":"connector/setup/","text":"API Connector The connector are used to access data from other resources than the wosa_core . An example of were the connector is used are the wosa_jobs which is the resource for all of the jobs. Setup A few files is required to be put in your resource to use the connector. We use two different connector files, One for the server and one for your client. It is super easy to set up, Let us go through the steps! Download the latest connector files from here . Drag & drop the files provided with the download to your resource. Add the files to your __resource (outdated dont use this) or fxmanifest file. Usage Find client and server functions documented at the next page. Keep in mind that FiveM natives and Wosa natives are not the same thing.","title":"Setup"},{"location":"connector/setup/#api-connector","text":"The connector are used to access data from other resources than the wosa_core . An example of were the connector is used are the wosa_jobs which is the resource for all of the jobs.","title":"API Connector"},{"location":"connector/setup/#setup","text":"A few files is required to be put in your resource to use the connector. We use two different connector files, One for the server and one for your client. It is super easy to set up, Let us go through the steps! Download the latest connector files from here . Drag & drop the files provided with the download to your resource. Add the files to your __resource (outdated dont use this) or fxmanifest file.","title":"Setup"},{"location":"connector/setup/#usage","text":"Find client and server functions documented at the next page. Keep in mind that FiveM natives and Wosa natives are not the same thing.","title":"Usage"},{"location":"core/api/","text":"Base Functions The most base functions, Functions that are related directly to the core of the framework. Should be used with caution. Classes Classes are used within the core API to isolete different classes and code from each other. -- Set: Shared -- Desc: How to register a class and use it. API.TEST_CLASS = {NewAPIClass('MY TEST CLASS')} function API.TEST_CLASS.MY_FUNC() print('hello!') end -- Set: Server -- Desc: Returns all of the classes currently registered, Classes get registered on API startup. local classes = API.GET_CURRENT_REGISTERED_CLASSES() -- Example code for i, item in ipairs(classes) do print('Class ID: '..item.id..', Class Label: '..item.class) end Power Access For the framework to properly boot up and run, API power needs to granted. The ServerNetV2 system is closed source and is only available to project developers to keep the framework secure. Destroying the API table on server or client or both will cause servere issues and will most likley crash your server all togheter. -- Set: Server -- Desc: Manually shut down the API, will result in everything server sided breaking. -- @blockHang: Setting this to true will make the server thread not freeze/hang. API_MANUAL_SHUTDOWN(blockHang, --[[ bool ]]) -- Set: Server -- Desc: Run a \"power check\" that will shut down the API if `api_power` is disabled API_LOCAL_POWER_CHECK() -- Extra Note: To toggle the power prior to running this function use `API.CONFIG.api_power = status -- [[ int ]]`. -- Set: Server -- Desc: Get general information about the API system. local data = API.GET_STATUS() -- Example code print('Status: '..data.version) print('Power: '..data.power) print('Ghost: '..data.ghost) Memory Certain memory functions within Lua can be used to keep down the memory usage. -- Set: Shared -- Desc: Collect \"garbage\", Straight from Lua. API.COLLECT_GARBAGE() -- Set: Client -- Desc: Get the current usage in kb's from the wosa_core client. API.GET_C_MEM_USAGE() Message The API features a message/log system were you can log different actions to console, discord or both. -- Set: Server -- Desc: Send a server to either the s-console or the discord webhook or both. -- @data_type = 'Error', 'Info', 'Success', 'Warning'(Overwrites Ghostmode / RULES: ->>), 'Overwrite'(Overwrites ghostmode / RULES: ONLY TO BE USED ON VERY IMPORTANT THINGS TO NOT ABUSE IT'S 'POWERS') -- @data_str = The console message/string. -- @blockBotMessage = If you want to block the discord bot message to display. -- @data_bot_str = The discord bot message. -- @Header = Header for the discord message, optional. API.MESSAGE(--[[ str ]] data_type, --[[ str ]] data_str, --[[ bool ]] blockBotMessage, --[[ str ]] data_bot_str, --[[ str ]] Header) -- Example code (only s-console message). API.MESSAGE('Error', 'The API core could not authenticate power access, Please contact a developer...')","title":"API Functions"},{"location":"core/api/#base-functions","text":"The most base functions, Functions that are related directly to the core of the framework. Should be used with caution.","title":"Base Functions"},{"location":"core/api/#classes","text":"Classes are used within the core API to isolete different classes and code from each other. -- Set: Shared -- Desc: How to register a class and use it. API.TEST_CLASS = {NewAPIClass('MY TEST CLASS')} function API.TEST_CLASS.MY_FUNC() print('hello!') end -- Set: Server -- Desc: Returns all of the classes currently registered, Classes get registered on API startup. local classes = API.GET_CURRENT_REGISTERED_CLASSES() -- Example code for i, item in ipairs(classes) do print('Class ID: '..item.id..', Class Label: '..item.class) end","title":"Classes"},{"location":"core/api/#power-access","text":"For the framework to properly boot up and run, API power needs to granted. The ServerNetV2 system is closed source and is only available to project developers to keep the framework secure. Destroying the API table on server or client or both will cause servere issues and will most likley crash your server all togheter. -- Set: Server -- Desc: Manually shut down the API, will result in everything server sided breaking. -- @blockHang: Setting this to true will make the server thread not freeze/hang. API_MANUAL_SHUTDOWN(blockHang, --[[ bool ]]) -- Set: Server -- Desc: Run a \"power check\" that will shut down the API if `api_power` is disabled API_LOCAL_POWER_CHECK() -- Extra Note: To toggle the power prior to running this function use `API.CONFIG.api_power = status -- [[ int ]]`. -- Set: Server -- Desc: Get general information about the API system. local data = API.GET_STATUS() -- Example code print('Status: '..data.version) print('Power: '..data.power) print('Ghost: '..data.ghost)","title":"Power Access"},{"location":"core/api/#memory","text":"Certain memory functions within Lua can be used to keep down the memory usage. -- Set: Shared -- Desc: Collect \"garbage\", Straight from Lua. API.COLLECT_GARBAGE() -- Set: Client -- Desc: Get the current usage in kb's from the wosa_core client. API.GET_C_MEM_USAGE()","title":"Memory"},{"location":"core/api/#message","text":"The API features a message/log system were you can log different actions to console, discord or both. -- Set: Server -- Desc: Send a server to either the s-console or the discord webhook or both. -- @data_type = 'Error', 'Info', 'Success', 'Warning'(Overwrites Ghostmode / RULES: ->>), 'Overwrite'(Overwrites ghostmode / RULES: ONLY TO BE USED ON VERY IMPORTANT THINGS TO NOT ABUSE IT'S 'POWERS') -- @data_str = The console message/string. -- @blockBotMessage = If you want to block the discord bot message to display. -- @data_bot_str = The discord bot message. -- @Header = Header for the discord message, optional. API.MESSAGE(--[[ str ]] data_type, --[[ str ]] data_str, --[[ bool ]] blockBotMessage, --[[ str ]] data_bot_str, --[[ str ]] Header) -- Example code (only s-console message). API.MESSAGE('Error', 'The API core could not authenticate power access, Please contact a developer...')","title":"Message"},{"location":"core/client_natives/","text":"Client Functions Core client natives used within the resource wosa_core. -- FREEZE ALL MOVEMENTS + PED //Toggle not each tick API.NATIVE.FREEZE_ALL_MOVEMENT(bool) -- CALL CAMERA VIEW (DEFAULT SCRIPTED CAMERA) ONLY API.NATIVE.CREATE_CAMERA(x, y, z, rx, ry, rz, extra_data) -- CALL CAMERA VIEW WITH ANIMATION (2 CAMERAS) ONLY API.NATIVE.CREATE_ANIMATED_CAMERA(x, y, z, rx, ry, rz, x2, y2, z2, rx2, ry2, rz2, duration, extra_data) -- DESTROY ALL \"FRAMEWORK\" CAMERAS API.NATIVE.DESTROY_ALL_SCRIPT_CAMERAS() -- DESTROY SPECIFIC CAMERA, KINDA RETARDED CAUSE IT WOULD LITTERLY STOP RENDERING ANY CAMERA API.NATIVE.DESTROY_CAMERA(cam) -- BLOCK/HIDE HUD THIS FRAME API.NATIVE.HIDE_HUD_THIS_TICK() local bool = API.NATIVE.IS_HUD_HIDDEN() -- LOADING WHEEL BOTTOM RIGHT API.NATIVE.LOADING_WHEEL(showText, showTime, showType) -- HELP TEXT NATIVE RIGHT UP CORNER (NEEDS TO BE CALLED ONCE) API.NATIVE.HELP_TEXT_DUR(lineOne, lineTwo, lineThree, duration) -- DRAW MISSION TEXT FUNCTION API.NATIVE.MISSION_TEXT_2(m_text, showtime) -- HELP TEXT NATIVE RIGHT UP CORNER (NEEDS TO BE CALLED EACH TICK) API.NATIVE.HELP_TEXT_TICK(str) -- HELP TEXT NATIVE RIGHT UP CORNER LONG (NEEDS TO BE CALLED EACH TICK) API.NATIVE.HELP_TEXT_LONG_TICK(str1, str2, str3) -- SHOW NOTIFICATION API.NATIVE.NOTIFICATION(text) local bool = API.NATIVE.DOES_VEHICLE_HAVE_EXTRAS(veh) -- FROM VEHICLE GET DATA TO A TABLE local data = API.NATIVE.VEHICLE_TO_DATA(veh) -- SET OUTFIT FOR MP PED (USED FOR EUP MOSTLY BUT NOT LIMITED TO) API.NATIVE.SET_EUP_OUTFIT(outfit) -- CREATE A VEHICLE FROM DATA (NATIVE.VEHICLE_TO_DATA) FUNCTION API.NATIVE.CREATE_VEHICLE_FROM_DATA(data, x,y,z,h, dontnetwork, specialData) -- CREATE VEHICLE API.NATIVE.CREATE_VEHICLE(vehicleName, coords, data, Network, setHeading) API.NATIVE.REQUEST_MODEL(inp) local bool = API.NATIVE.IS_MODEL_LOADED(inp) -- KEY BOARD INPUT BOX local inp = API.NATIVE.KEYBOARD_INPUT(TextEntry, ExampleText, MaxStringLenght) -- REQUEST A PLAYER NPC/MP MODEL API.NATIVE.SET_PLAYER_PED(data) -- REQUEST MP CHARACTER CLOTHING CHANGE API.NATIVE.SET_PED_CLOTHING(arms, arms_tex, undershirt, undershirt_tex, top, top_tex, pants, pants_tex, shoes, shoes_tex, neck, neck_tex) -- GET DATA FOR FUNCTION ^^ (JUST A TIME SAVER REALLY) local arms_d, arms_t, undershirt_d, undershirt_t, jacket_d, jacket_t, pants_d, pants_t, shoes_d, shoes_t, neck_d, neck_t = API.NATIVE.GET_PED_CLOTHING() -- DRAW 3D TEXT ON SCREEN API.NATIVE.DRAW_SCREEN_TEXT(x, y, width, height, scale, text, r, g, b, a, font, centre) -- DRAW 3D TEXT INGAME API.NATIVE.DRAW_GAME_TEXT(x,y,z, text) -- DRAW 3D TEXT INGAME API.NATIVE.DRAW_GAME_TEXT_NO_BOX(x,y,z, text, _scale) -- DRAW 3D TEXT INGAME API.NATIVE.DRAW_GAME_TEXT_REPEAT(x,y,z, text, ms) -- LOAD WALK STYLE API.NATIVE.REQUEST_ANIMATION_SET(dict) local players = API.NATIVE.GET_PLAYERS_IN_AREA_EXTRA(coords, area) local players = API.NATIVE.GET_PLAYERS_IN_AREA() API.NATIVE.REQUEST_ANIMATION_DICT(dict) local vehicle_cache = API.NATIVE.GET_LOADED_VEHICLES() local vehicle = API.NATIVE.GET_CLOSEST_VEHICLE() local player = API.NATIVE.GET_CLOSE_PLAYER() local players = API.NATIVE.GET_PLAYERS() -- PRINT DEBUG COMMAND IN CONSOLE IF DEV MODE IS ACTIVE -- print_type (int): 1 = Success, 2 = Warning, 3 = Error -- (WILL ONLY WORK IF \"framework.dev_mode\"/Development mode envi is enabled) API.NATIVE.DEBUG_PRINT(print_type, print_msg) local formatted = API.NATIVE.RETURN_COMMA_VALUE(amount) local new = API.NATIVE.PAIRS_BY_KEYS(t, f)","title":"Client Natives"},{"location":"core/client_natives/#client-functions","text":"Core client natives used within the resource wosa_core. -- FREEZE ALL MOVEMENTS + PED //Toggle not each tick API.NATIVE.FREEZE_ALL_MOVEMENT(bool) -- CALL CAMERA VIEW (DEFAULT SCRIPTED CAMERA) ONLY API.NATIVE.CREATE_CAMERA(x, y, z, rx, ry, rz, extra_data) -- CALL CAMERA VIEW WITH ANIMATION (2 CAMERAS) ONLY API.NATIVE.CREATE_ANIMATED_CAMERA(x, y, z, rx, ry, rz, x2, y2, z2, rx2, ry2, rz2, duration, extra_data) -- DESTROY ALL \"FRAMEWORK\" CAMERAS API.NATIVE.DESTROY_ALL_SCRIPT_CAMERAS() -- DESTROY SPECIFIC CAMERA, KINDA RETARDED CAUSE IT WOULD LITTERLY STOP RENDERING ANY CAMERA API.NATIVE.DESTROY_CAMERA(cam) -- BLOCK/HIDE HUD THIS FRAME API.NATIVE.HIDE_HUD_THIS_TICK() local bool = API.NATIVE.IS_HUD_HIDDEN() -- LOADING WHEEL BOTTOM RIGHT API.NATIVE.LOADING_WHEEL(showText, showTime, showType) -- HELP TEXT NATIVE RIGHT UP CORNER (NEEDS TO BE CALLED ONCE) API.NATIVE.HELP_TEXT_DUR(lineOne, lineTwo, lineThree, duration) -- DRAW MISSION TEXT FUNCTION API.NATIVE.MISSION_TEXT_2(m_text, showtime) -- HELP TEXT NATIVE RIGHT UP CORNER (NEEDS TO BE CALLED EACH TICK) API.NATIVE.HELP_TEXT_TICK(str) -- HELP TEXT NATIVE RIGHT UP CORNER LONG (NEEDS TO BE CALLED EACH TICK) API.NATIVE.HELP_TEXT_LONG_TICK(str1, str2, str3) -- SHOW NOTIFICATION API.NATIVE.NOTIFICATION(text) local bool = API.NATIVE.DOES_VEHICLE_HAVE_EXTRAS(veh) -- FROM VEHICLE GET DATA TO A TABLE local data = API.NATIVE.VEHICLE_TO_DATA(veh) -- SET OUTFIT FOR MP PED (USED FOR EUP MOSTLY BUT NOT LIMITED TO) API.NATIVE.SET_EUP_OUTFIT(outfit) -- CREATE A VEHICLE FROM DATA (NATIVE.VEHICLE_TO_DATA) FUNCTION API.NATIVE.CREATE_VEHICLE_FROM_DATA(data, x,y,z,h, dontnetwork, specialData) -- CREATE VEHICLE API.NATIVE.CREATE_VEHICLE(vehicleName, coords, data, Network, setHeading) API.NATIVE.REQUEST_MODEL(inp) local bool = API.NATIVE.IS_MODEL_LOADED(inp) -- KEY BOARD INPUT BOX local inp = API.NATIVE.KEYBOARD_INPUT(TextEntry, ExampleText, MaxStringLenght) -- REQUEST A PLAYER NPC/MP MODEL API.NATIVE.SET_PLAYER_PED(data) -- REQUEST MP CHARACTER CLOTHING CHANGE API.NATIVE.SET_PED_CLOTHING(arms, arms_tex, undershirt, undershirt_tex, top, top_tex, pants, pants_tex, shoes, shoes_tex, neck, neck_tex) -- GET DATA FOR FUNCTION ^^ (JUST A TIME SAVER REALLY) local arms_d, arms_t, undershirt_d, undershirt_t, jacket_d, jacket_t, pants_d, pants_t, shoes_d, shoes_t, neck_d, neck_t = API.NATIVE.GET_PED_CLOTHING() -- DRAW 3D TEXT ON SCREEN API.NATIVE.DRAW_SCREEN_TEXT(x, y, width, height, scale, text, r, g, b, a, font, centre) -- DRAW 3D TEXT INGAME API.NATIVE.DRAW_GAME_TEXT(x,y,z, text) -- DRAW 3D TEXT INGAME API.NATIVE.DRAW_GAME_TEXT_NO_BOX(x,y,z, text, _scale) -- DRAW 3D TEXT INGAME API.NATIVE.DRAW_GAME_TEXT_REPEAT(x,y,z, text, ms) -- LOAD WALK STYLE API.NATIVE.REQUEST_ANIMATION_SET(dict) local players = API.NATIVE.GET_PLAYERS_IN_AREA_EXTRA(coords, area) local players = API.NATIVE.GET_PLAYERS_IN_AREA() API.NATIVE.REQUEST_ANIMATION_DICT(dict) local vehicle_cache = API.NATIVE.GET_LOADED_VEHICLES() local vehicle = API.NATIVE.GET_CLOSEST_VEHICLE() local player = API.NATIVE.GET_CLOSE_PLAYER() local players = API.NATIVE.GET_PLAYERS() -- PRINT DEBUG COMMAND IN CONSOLE IF DEV MODE IS ACTIVE -- print_type (int): 1 = Success, 2 = Warning, 3 = Error -- (WILL ONLY WORK IF \"framework.dev_mode\"/Development mode envi is enabled) API.NATIVE.DEBUG_PRINT(print_type, print_msg) local formatted = API.NATIVE.RETURN_COMMA_VALUE(amount) local new = API.NATIVE.PAIRS_BY_KEYS(t, f)","title":"Client Functions"},{"location":"core/external/","text":"External Scripts Looking to add in your own libraries and use them for the core and other resources? In this page you will learn on how to do exactly that! Installing Libraries To keep all of our \"external\" libraries sorted and kept track of we have a specified folder for placing libraries or external scripts. As you can see libraries such as RageUI exist there. By having all of our integrated libraries we depend on inside one directory we can more easily maintain and keep track of them. When installing a new library please always place them in the specified directory. Using Libraries Using libraries in the same resource is pretty straight forward but what about using them from another resource? You can include files from another resource by using the @ like this. This is an example from using the RageUI files from wosa_core library. From our knowledge @ does not support usage of the wildcards yet, Therefor you need to add file by file. client_scripts { '@wosa_core/scripting/scripting_ex/RageUI/RMenu.lua', '@wosa_core/scripting/scripting_ex/RageUI/RageUI.lua', '@wosa_core/scripting/scripting_ex/RageUI/Menu.lua', '@wosa_core/scripting/scripting_ex/RageUI/MenuController.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Audio.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Rectangle.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Screen.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Sprite.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Text.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Visual.lua', '@wosa_core/scripting/scripting_ex/RageUI/elements/ItemsBadge.lua', '@wosa_core/scripting/scripting_ex/RageUI/elements/ItemsColour.lua', '@wosa_core/scripting/scripting_ex/RageUI/elements/PanelColour.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UIButton.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UICheckBox.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISeparator.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UIList.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UIProgress.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISlider.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISliderHeritage.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISliderProgress.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIBoutonPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIColourPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIGridPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIGridPanelHorizontal.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIGridPanelVertical.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIPercentagePanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIStatisticsPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/windows/UIHeritage.lua', }","title":"External Scripts"},{"location":"core/external/#external-scripts","text":"Looking to add in your own libraries and use them for the core and other resources? In this page you will learn on how to do exactly that!","title":"External Scripts"},{"location":"core/external/#installing-libraries","text":"To keep all of our \"external\" libraries sorted and kept track of we have a specified folder for placing libraries or external scripts. As you can see libraries such as RageUI exist there. By having all of our integrated libraries we depend on inside one directory we can more easily maintain and keep track of them. When installing a new library please always place them in the specified directory.","title":"Installing Libraries"},{"location":"core/external/#using-libraries","text":"Using libraries in the same resource is pretty straight forward but what about using them from another resource? You can include files from another resource by using the @ like this. This is an example from using the RageUI files from wosa_core library. From our knowledge @ does not support usage of the wildcards yet, Therefor you need to add file by file. client_scripts { '@wosa_core/scripting/scripting_ex/RageUI/RMenu.lua', '@wosa_core/scripting/scripting_ex/RageUI/RageUI.lua', '@wosa_core/scripting/scripting_ex/RageUI/Menu.lua', '@wosa_core/scripting/scripting_ex/RageUI/MenuController.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Audio.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Rectangle.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Screen.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Sprite.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Text.lua', '@wosa_core/scripting/scripting_ex/RageUI/components/Visual.lua', '@wosa_core/scripting/scripting_ex/RageUI/elements/ItemsBadge.lua', '@wosa_core/scripting/scripting_ex/RageUI/elements/ItemsColour.lua', '@wosa_core/scripting/scripting_ex/RageUI/elements/PanelColour.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UIButton.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UICheckBox.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISeparator.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UIList.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UIProgress.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISlider.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISliderHeritage.lua', '@wosa_core/scripting/scripting_ex/RageUI/items/UISliderProgress.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIBoutonPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIColourPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIGridPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIGridPanelHorizontal.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIGridPanelVertical.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIPercentagePanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/panels/UIStatisticsPanel.lua', '@wosa_core/scripting/scripting_ex/RageUI/windows/UIHeritage.lua', }","title":"Using Libraries"},{"location":"core/introduction/","text":"Core Introduction The core, powering the whole framework and all its components are one of the most vital, important and complex part of the framework. Therefore we do not recommend or suggest that newbies of scripting to make changes in the core. This documentation was written for experienced developers working on the project officially or non officialy to make it better. Enabling Development Features We recommend you to disable the API ghostmode which will give you more in-depht logging. # Disables API ghostmode which is enabled by default, gets all api logs and events set wosa.disable_api_ghostmode 1 We also recommend you to enable the global framework.dev_mode via this file. With the development mode enabled you will be in a more cousy development environment.","title":"Introduction"},{"location":"core/introduction/#core-introduction","text":"The core, powering the whole framework and all its components are one of the most vital, important and complex part of the framework. Therefore we do not recommend or suggest that newbies of scripting to make changes in the core. This documentation was written for experienced developers working on the project officially or non officialy to make it better.","title":"Core Introduction"},{"location":"core/introduction/#enabling-development-features","text":"We recommend you to disable the API ghostmode which will give you more in-depht logging. # Disables API ghostmode which is enabled by default, gets all api logs and events set wosa.disable_api_ghostmode 1 We also recommend you to enable the global framework.dev_mode via this file. With the development mode enabled you will be in a more cousy development environment.","title":"Enabling Development Features"},{"location":"core/server_natives/","text":"Server Functions Core server natives used within the resource wosa_core. -- CLEAR ALL TABLES FROM DATABASE CONNECTED TO CHARACTER -- @source = source / ID -- @source_level = player level to check against @level -- @level = permission level to check against -- @returns = true or false depending on if user can procceed with their rank API.NATIVE.REMOVE_CHARACTER_FROM_DATABASE(source, inv_table, phoneNumber) -- OFFICIAL REGISTERED RANKS AND DEFFERAL RETURN FUNCTION -- @source = source / ID -- @source_level = player level to check against @level -- @level = permission level to check against -- @returns = true or false depending on if user can procceed with their rank local bool = API.NATIVE.COMPARE_RANK_AND_RETURN(source, source_level, level) -- IS THE USER ACTIVE ON THE SESSION? local bool = API.NATIVE.IS_USER_ACTIVE_ON_SESSION(identifier) -- CHECK IF THE USER IS ONLINE WITH A SPECIFIC CHARACTER local bool = API.NATIVE.IS_USER_ACTIVE_WITH_CHARACTER_ON_SESSION(identifier, inv_table) API.NATIVE.GET_SOURCE_FROM_IDENTIFIER(identifier) -- RETURN THE CHARACTER IDENTIFIER (R* LICENSE) ID = API.NATIVE.GET_SOURCE_FROM_IDENTIFIER(identifier) local identifier = API.NATIVE.GET_PLAYER_IDENTIFIER(type, source) -- SEND INFO MESSAGE TO PLAYER (FROM SERVER) API.NATIVE.SEND_INFO_MESSAGE_CLIENT(rec, message) -- GET ALL CHARCTERS FROM DATABASE local characters = API.NATIVE.GET_ALL_CHARACTERS() -- GET CHARACTER DATA FROM FIRST/LAST-NAME local characters = API.NATIVE.GET_CHARACTER_DATA_FROM_NAME(firstname, lastname) local formatted = API.NATIVE.RETURN_COMMA_VALUE(amount) local new = API.NATIVE.PAIRS_BY_KEYS(t, f) local date = API.NATIVE.CONVERT_SQL_DATE_TO_LUA_DATE(Unix)","title":"Server Natives"},{"location":"core/server_natives/#server-functions","text":"Core server natives used within the resource wosa_core. -- CLEAR ALL TABLES FROM DATABASE CONNECTED TO CHARACTER -- @source = source / ID -- @source_level = player level to check against @level -- @level = permission level to check against -- @returns = true or false depending on if user can procceed with their rank API.NATIVE.REMOVE_CHARACTER_FROM_DATABASE(source, inv_table, phoneNumber) -- OFFICIAL REGISTERED RANKS AND DEFFERAL RETURN FUNCTION -- @source = source / ID -- @source_level = player level to check against @level -- @level = permission level to check against -- @returns = true or false depending on if user can procceed with their rank local bool = API.NATIVE.COMPARE_RANK_AND_RETURN(source, source_level, level) -- IS THE USER ACTIVE ON THE SESSION? local bool = API.NATIVE.IS_USER_ACTIVE_ON_SESSION(identifier) -- CHECK IF THE USER IS ONLINE WITH A SPECIFIC CHARACTER local bool = API.NATIVE.IS_USER_ACTIVE_WITH_CHARACTER_ON_SESSION(identifier, inv_table) API.NATIVE.GET_SOURCE_FROM_IDENTIFIER(identifier) -- RETURN THE CHARACTER IDENTIFIER (R* LICENSE) ID = API.NATIVE.GET_SOURCE_FROM_IDENTIFIER(identifier) local identifier = API.NATIVE.GET_PLAYER_IDENTIFIER(type, source) -- SEND INFO MESSAGE TO PLAYER (FROM SERVER) API.NATIVE.SEND_INFO_MESSAGE_CLIENT(rec, message) -- GET ALL CHARCTERS FROM DATABASE local characters = API.NATIVE.GET_ALL_CHARACTERS() -- GET CHARACTER DATA FROM FIRST/LAST-NAME local characters = API.NATIVE.GET_CHARACTER_DATA_FROM_NAME(firstname, lastname) local formatted = API.NATIVE.RETURN_COMMA_VALUE(amount) local new = API.NATIVE.PAIRS_BY_KEYS(t, f) local date = API.NATIVE.CONVERT_SQL_DATE_TO_LUA_DATE(Unix)","title":"Server Functions"},{"location":"core/system_log/","text":"System Log General documentation for working with the System Log, Used to provide infrastructure system logs related to startup and important executions. Writing System Logs You can find/add different system classed logs from this file . -- Set: Server -- Desc: Writes a line to the current open system log file. SOW.WRITE('FRAMEWORK_FILES_BEGIN_LOAD')","title":"System Log"},{"location":"core/system_log/#system-log","text":"General documentation for working with the System Log, Used to provide infrastructure system logs related to startup and important executions.","title":"System Log"},{"location":"core/system_log/#writing-system-logs","text":"You can find/add different system classed logs from this file . -- Set: Server -- Desc: Writes a line to the current open system log file. SOW.WRITE('FRAMEWORK_FILES_BEGIN_LOAD')","title":"Writing System Logs"},{"location":"events/events_client/","text":"Client Events Character AddEventHandler('__WOSA:ON_CHARACTER_SWITCH', function() end) AddEventHandler('__WOSA:ON_CHARACTER_LOAD', function() end) AddEventHandler('__WOSA:ON_CHARACTER_PRELOAD', function() end) AddEventHandler('__WOSA:ON_NEW_CHARACTER', function() end) AddEventHandler('__WOSA:ON_OFFDUTY', function(job) end) Inventory AddEventHandler('__WOSA:INVENTORY_UPDATE', function(inv_data) end) AddEventHandler('__WOSA:ITEM_USE', function(itemName, itemDisplayName, itemDatabaseID, itemRemovedOnUse) end) AddEventHandler('__WOSA:ITEM_ADD', function(itemName, itemDisplayName) end) AddEventHandler('__WOSA:ITEM_GIVE', function(receiverPlayerID, itemName, itemDisplayName, itemDatabaseID) end) AddEventHandler('__WOSA:ITEM_DROP', function(itemName, itemDisplayName, itemDatabaseID) end) AddEventHandler('__WOSA:ITEM_PICKUP', function(coordsOfItem, itemName, itemDisplayName) end) Phone AddEventHandler('__WOSA:911_CALL', function(CallerPlayerID, coords, callInfo, serviceCalled, callID) end) AddEventHandler('__WOSA:SERVICE_CALL', function(CallerPlayerID, coords, callInfo, serviceCalled, callID) end)","title":"Client Events"},{"location":"events/events_client/#client-events","text":"","title":"Client Events"},{"location":"events/events_client/#character","text":"AddEventHandler('__WOSA:ON_CHARACTER_SWITCH', function() end) AddEventHandler('__WOSA:ON_CHARACTER_LOAD', function() end) AddEventHandler('__WOSA:ON_CHARACTER_PRELOAD', function() end) AddEventHandler('__WOSA:ON_NEW_CHARACTER', function() end) AddEventHandler('__WOSA:ON_OFFDUTY', function(job) end)","title":"Character"},{"location":"events/events_client/#inventory","text":"AddEventHandler('__WOSA:INVENTORY_UPDATE', function(inv_data) end) AddEventHandler('__WOSA:ITEM_USE', function(itemName, itemDisplayName, itemDatabaseID, itemRemovedOnUse) end) AddEventHandler('__WOSA:ITEM_ADD', function(itemName, itemDisplayName) end) AddEventHandler('__WOSA:ITEM_GIVE', function(receiverPlayerID, itemName, itemDisplayName, itemDatabaseID) end) AddEventHandler('__WOSA:ITEM_DROP', function(itemName, itemDisplayName, itemDatabaseID) end) AddEventHandler('__WOSA:ITEM_PICKUP', function(coordsOfItem, itemName, itemDisplayName) end)","title":"Inventory"},{"location":"events/events_client/#phone","text":"AddEventHandler('__WOSA:911_CALL', function(CallerPlayerID, coords, callInfo, serviceCalled, callID) end) AddEventHandler('__WOSA:SERVICE_CALL', function(CallerPlayerID, coords, callInfo, serviceCalled, callID) end)","title":"Phone"},{"location":"events/events_server/","text":"Server Events Character AddEventHandler('__WOSA:CHARACTER_CREATED', function(playerID, characterData) end) AddEventHandler('__WOSA:CHARACTER_LOADED', function(playerID, characterData) end) AddEventHandler('__WOSA:CHARACTER_REMOVED', function(playerID, characterData) end) User AddEventHandler('__WOSA:SERVER:USER_CONNECTING', function(playerID, playerLicense, playerRank, isPlayerNew) end) AddEventHandler('__WOSA:SERVER:USER_LEAVING', function(playerID, playerLicense, playerRank, leaveReason) end)","title":"Server Events"},{"location":"events/events_server/#server-events","text":"","title":"Server Events"},{"location":"events/events_server/#character","text":"AddEventHandler('__WOSA:CHARACTER_CREATED', function(playerID, characterData) end) AddEventHandler('__WOSA:CHARACTER_LOADED', function(playerID, characterData) end) AddEventHandler('__WOSA:CHARACTER_REMOVED', function(playerID, characterData) end)","title":"Character"},{"location":"events/events_server/#user","text":"AddEventHandler('__WOSA:SERVER:USER_CONNECTING', function(playerID, playerLicense, playerRank, isPlayerNew) end) AddEventHandler('__WOSA:SERVER:USER_LEAVING', function(playerID, playerLicense, playerRank, leaveReason) end)","title":"User"},{"location":"install/install/","text":"Installation Did you just get access to the framework? That's cool, Now let us help you install it to your awesome server! Server Setup You might need to tweak a few things to get the best results from the framework, Old artifact versions and such may cause the framework to perform bad in certain areas. Make sure that you have checked all of these before moving on with the guide. Make sure that your server is running on a updated version for either linux or windows . Make sure that you are using onesync legacy in the server.cfg . As we are using OneSync Legacy technology, The framework is heavily dependant on this. Required Resources To run our framework you will need a few things to make sure it will run as expected. Without these required dependencies certain functions may perform bad or not work at all. mysql-async (the most important resource by far, Communicates with your database) eup-stream (The clothing for certain jobs such as police require this. Recommended version is \"V.3 (Update 3.6)\" .) These resources should be started before any framework resources as they should be loaded prior to the framework. Server Configuration Lets configure the server.cfg file, Add the following lines to the config. It is important that you set the wosa.key with your license key in order for the framework to properly boot up. # Convars set wosa.key \"mykey\" # required set wosa.server \"my server!\" # not required set wosa.discord \"my discord\" # not required set wosa.website \"my website\" # not required set wosa.discord_server_log \"my webhook\" # not required set wosa.discord_report_log \"my webhook\" # not required # required ensure mysql-async ensure eup-stream ensure wosa_core ensure wosa_jobs ensure wosa_assets # This is required unless you change police & fire configs to your own vehicles. # recommended but not required ensure wosa_hud ensure wosa_chat Download Time to download all the required files to run the framework! Super easy, Just follow these steps! You can either download the latest version or the experimental (click to download) version from our GitHub. The experimental version might be unstable, broken or not working at all as it is the \"test\" version still under going heavy development. Import the import.sql file from the download and import it to your database, There are loads of tutorials on the internet if you are unsure how to do it. Add all of the wosa_ files to /resources , We strongly recommend you to create a sub folder within the /resources folder like this /resources/[wosa] to support our UpdateFFX tool for example. Final You server is ready for some roleplay, Thank you for supporting this project! If you have are experiencing any issues we advise you to take a look at troubleshooting .","title":"How to install"},{"location":"install/install/#installation","text":"Did you just get access to the framework? That's cool, Now let us help you install it to your awesome server!","title":"Installation"},{"location":"install/install/#server-setup","text":"You might need to tweak a few things to get the best results from the framework, Old artifact versions and such may cause the framework to perform bad in certain areas. Make sure that you have checked all of these before moving on with the guide. Make sure that your server is running on a updated version for either linux or windows . Make sure that you are using onesync legacy in the server.cfg . As we are using OneSync Legacy technology, The framework is heavily dependant on this.","title":"Server Setup"},{"location":"install/install/#required-resources","text":"To run our framework you will need a few things to make sure it will run as expected. Without these required dependencies certain functions may perform bad or not work at all. mysql-async (the most important resource by far, Communicates with your database) eup-stream (The clothing for certain jobs such as police require this. Recommended version is \"V.3 (Update 3.6)\" .) These resources should be started before any framework resources as they should be loaded prior to the framework.","title":"Required Resources"},{"location":"install/install/#server-configuration","text":"Lets configure the server.cfg file, Add the following lines to the config. It is important that you set the wosa.key with your license key in order for the framework to properly boot up. # Convars set wosa.key \"mykey\" # required set wosa.server \"my server!\" # not required set wosa.discord \"my discord\" # not required set wosa.website \"my website\" # not required set wosa.discord_server_log \"my webhook\" # not required set wosa.discord_report_log \"my webhook\" # not required # required ensure mysql-async ensure eup-stream ensure wosa_core ensure wosa_jobs ensure wosa_assets # This is required unless you change police & fire configs to your own vehicles. # recommended but not required ensure wosa_hud ensure wosa_chat","title":"Server Configuration"},{"location":"install/install/#download","text":"Time to download all the required files to run the framework! Super easy, Just follow these steps! You can either download the latest version or the experimental (click to download) version from our GitHub. The experimental version might be unstable, broken or not working at all as it is the \"test\" version still under going heavy development. Import the import.sql file from the download and import it to your database, There are loads of tutorials on the internet if you are unsure how to do it. Add all of the wosa_ files to /resources , We strongly recommend you to create a sub folder within the /resources folder like this /resources/[wosa] to support our UpdateFFX tool for example.","title":"Download"},{"location":"install/install/#final","text":"You server is ready for some roleplay, Thank you for supporting this project! If you have are experiencing any issues we advise you to take a look at troubleshooting .","title":"Final"},{"location":"install/troubleshooting/","text":"Troubleshooting Having trouble starting your server? It wont you connect? Whoops, Dont panic, We are here to help you! Issue: When I start the server it just freezes and/or restarts by itself all the time. Solution: This behavior indicates that the framework license key is not valid or already in use, Make sure that you got wosa.key set in the server.cfg or try to wait for about 1-5 minutes. A non-valid key will crash/freeze your server. Issue: The MySQL gives a ton of errors on startup. Solution: If you are receiving heavy MySQL errors on startup you have most likley failed to setup your database or the mysql-async properly. To make sure you have not missed anything consider following this guide regarding the setup of mysql-async. Issue: When I launch the server it says that the key is not valid. Solution: This error indicates that you have not entered or entered the wrong \"wosa.key\" in the \"server.cfg\", Make sure that you did follow the installation guide. Issue: When I start my server it says that my key is already in use. Solution: This means that the wosa.key you entered in your server.cfg is already marked as \"in use\" by our auth server. Only one server at time can use a specific key, If you require more for your community please contact support. If you did just close your server please wait up to 5 minutes for the auth service to re-sync. To avoid having to wait ~5 minutes you can use the command \"quit\" when closing the server or manually shut down the core with \"stop wosa_core\" before closing the terminal. Issue: The console says that MariaDB field xxx does not have a default value. Solution: This is hopefully fixed in newer versions of wosa and should not occur but if it do occur please read this post. Issue: Cars in the server wont spawn and will just spam the F8 console / When I try to spawn a car from the garage I just get a black screen. Solution: You need to use a up to date server and use onesync legacy in your server.cfg to enable server awareness as wosa is built on OneSync technology. If you did not find a solution on this page do not hesitate to contact support on our forums or in our discord.","title":"Troubleshooting"},{"location":"install/troubleshooting/#troubleshooting","text":"Having trouble starting your server? It wont you connect? Whoops, Dont panic, We are here to help you! Issue: When I start the server it just freezes and/or restarts by itself all the time. Solution: This behavior indicates that the framework license key is not valid or already in use, Make sure that you got wosa.key set in the server.cfg or try to wait for about 1-5 minutes. A non-valid key will crash/freeze your server. Issue: The MySQL gives a ton of errors on startup. Solution: If you are receiving heavy MySQL errors on startup you have most likley failed to setup your database or the mysql-async properly. To make sure you have not missed anything consider following this guide regarding the setup of mysql-async. Issue: When I launch the server it says that the key is not valid. Solution: This error indicates that you have not entered or entered the wrong \"wosa.key\" in the \"server.cfg\", Make sure that you did follow the installation guide. Issue: When I start my server it says that my key is already in use. Solution: This means that the wosa.key you entered in your server.cfg is already marked as \"in use\" by our auth server. Only one server at time can use a specific key, If you require more for your community please contact support. If you did just close your server please wait up to 5 minutes for the auth service to re-sync. To avoid having to wait ~5 minutes you can use the command \"quit\" when closing the server or manually shut down the core with \"stop wosa_core\" before closing the terminal. Issue: The console says that MariaDB field xxx does not have a default value. Solution: This is hopefully fixed in newer versions of wosa and should not occur but if it do occur please read this post. Issue: Cars in the server wont spawn and will just spam the F8 console / When I try to spawn a car from the garage I just get a black screen. Solution: You need to use a up to date server and use onesync legacy in your server.cfg to enable server awareness as wosa is built on OneSync technology. If you did not find a solution on this page do not hesitate to contact support on our forums or in our discord.","title":"Troubleshooting"}]}